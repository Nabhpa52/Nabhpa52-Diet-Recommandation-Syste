# -*- coding: utf-8 -*-
"""ML_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h7dbZjF5C5Zba0tXTXelqehNkfpaihQs
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.multioutput import MultiOutputRegressor
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import mean_squared_error
import joblib

# Step 1: Load dataset
df = pd.read_csv("./dataset1.csv")

# Encode gender
le = LabelEncoder()
df['Gender'] = le.fit_transform(df['Gender'])  # Male=1, Female=0

# Features used for prediction (derived values excluded: BMI and Blood Sugar)
features = ['Age', 'Gender', 'Height_cm', 'Weight_kg', 'Systolic_BP', 'Diastolic_BP', 'Blood_Sugar_mg_dL']
X = df[features]

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
joblib.dump(scaler, 'scaler.pkl')

# Encode target variables
le_Calories = LabelEncoder()
le_breakfast = LabelEncoder()
le_lunch = LabelEncoder()
le_dinner = LabelEncoder()

y = pd.DataFrame({
    'Calories': le_Calories.fit_transform(df['Recommended_Calories']),
    'Breakfast': le_breakfast.fit_transform(df['Breakfast']),
    'Lunch': le_lunch.fit_transform(df['Lunch']),
    'Dinner': le_dinner.fit_transform(df['Dinner'])
})

# Save encoders
joblib.dump(le_Calories, 'le_Calories.pkl')
joblib.dump(le_breakfast, 'le_breakfast.pkl')
joblib.dump(le_lunch, 'le_lunch.pkl')
joblib.dump(le_dinner, 'le_dinner.pkl')

# Train model
from sklearn.ensemble import RandomForestClassifier
from sklearn.multioutput import MultiOutputClassifier # Import MultiOutputClassifier
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Use MultiOutputClassifier instead of MultiOutputRegressor for classification tasks.
model = MultiOutputClassifier(RandomForestClassifier(n_estimators=100, random_state=42))
model.fit(X_train, y_train)

joblib.dump(model, 'diet_model.pkl')
print("Multi-label classification model trained and saved.")

"""Inference Code for Meal Recommendation

"""

# Step 1: Simulated user input
user_input = {
    'Age': 25,
    'Gender': 'Male',
    'Height_cm': 187,
    'Weight_kg': 65,
    'Systolic_BP': 100,
    'Diastolic_BP': 68,
    'Blood_Sugar_mg_dL': 100,
}

# Step 2: Calculate derived metrics
height_m = user_input['Height_cm'] / 100
bmi = user_input['Weight_kg'] / (height_m ** 2)

# Simulated blood sugar logic (not used in training model, only for display if needed)
# blood_sugar = 80 + (user_input['Age'] * 0.15) + (bmi * 0.4)

# Step 3: Prepare input DataFrame
input_df = pd.DataFrame([{
    'Age': user_input['Age'],
    'Gender': 1 if user_input['Gender'].lower() == 'male' else 0,
    'Height_cm': user_input['Height_cm'],
    'Weight_kg': user_input['Weight_kg'],
    'Systolic_BP': user_input['Systolic_BP'],
    'Diastolic_BP': user_input['Diastolic_BP'],
    'Blood_Sugar_mg_dL': user_input['Blood_Sugar_mg_dL'],
}])

# Step 4: Load scaler and model
scaler = joblib.load('scaler.pkl')
model = joblib.load('diet_model.pkl')

# Step 5: Load label encoders
le_Calories = joblib.load('le_Calories.pkl')
le_breakfast = joblib.load('le_breakfast.pkl')
le_lunch = joblib.load('le_lunch.pkl')
le_dinner = joblib.load('le_dinner.pkl')

# Step 6: Scale input
input_scaled = scaler.transform(input_df)

# Step 7: Predict
predictions = model.predict(input_scaled)[0]

# Step 8: Decode predictions
calories = le_Calories.inverse_transform([predictions[0]])[0]
breakfast = le_breakfast.inverse_transform([predictions[1]])[0]
lunch = le_lunch.inverse_transform([predictions[2]])[0]
dinner = le_dinner.inverse_transform([predictions[3]])[0]

# Step 9: Show result
print("\nðŸŽ¯ Diet Plan Recommendation:")
print(f"Calories (estimate): ~{int(calories)} kcal")
# print(f"Calories (estimate): ~{1800 + int(bmi * 2)} kcal")  # optional placeholder
print(f"Breakfast: {breakfast}")
print(f"Lunch: {lunch}")
print(f"Dinner: {dinner}")

